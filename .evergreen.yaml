functions:
  "fetch_source":
    - command: git.get_project
      params:
        directory: src/atlas-service-broker
  "go_unit_tests":
    - command: shell.exec
      type: system
      params:
        working_dir: src/atlas-service-broker
        script: |
          go test -v ./pkg/... | tee unit_result.suite
    - command: gotest.parse_files
      params:
        files: ["src/atlas-service-broker/unit_result.suite"]
  "go_vet":
    - command: shell.exec
      type: system
      params:
        working_dir: src/atlas-service-broker
        script: |
          go vet ./...
  "integration_tests":
    - command: shell.exec
      params:
        working_dir: src/atlas-service-broker
        script: |
          export ATLAS_BASE_URL=${atlas_base_url}
          export ATLAS_GROUP_ID=${atlas_group_id}
          export ATLAS_PUBLIC_KEY=${atlas_public_key}
          export ATLAS_PRIVATE_KEY=${atlas_private_key}
          go test -timeout 1h -v ./test | tee int_result.suite
    - command: gotest.parse_files
      params:
        files: ["src/atlas-service-broker/int_result.suite"]
  "get_tagged_version":
    - command: shell.exec
      params:
        working_dir: src/atlas-service-broker
        script: |
          # Get version from tag on head and throw error if none exists
          # Remove the character v at the beginning of the string if any, and keep the rest
          export VERSION=$(git tag -l --points-at HEAD | sed 's/^v\(.*\)/\1/')
          [[ -z "$VERSION" ]] && { echo "No version tag on HEAD" ; exit 1; }

          echo "version: \"$VERSION\"" > version_expansion.yaml
    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/atlas-service-broker/version_expansion.yaml
  "build_binaries":
    - command: shell.exec
      params:
        working_dir: src/atlas-service-broker
        script: |
          ./scripts/build-production-binary.sh artifacts/atlas-service-broker-linux-arm64-${version}
  "setup_hub":
    - command: shell.exec
      params:
        script: |
          sudo pacman  --refresh --noconfirm -S hub
          echo "Installed Hub CLI"
  "publish_github_release":
    - command: shell.exec
      params:
        working_dir: src/atlas-service-broker
        script: |
          export GITHUB_TOKEN=${github_token}

          # Get all artifacts and turn them into a list with --attach flags
          export ARTIFACTS_ATTACH=$(ls artifacts | xargs -I {} echo "--attach artifacts/{} ")

          hub release create --message "Atlas Service Broker ${version}" $ARTIFACTS_ATTACH v${version}
  "setup_docker":
    - command: shell.exec
      params:
        script: |
          sudo pacman --refresh --noconfirm -S community/docker
          systemctl start docker.service
  "teardown_docker":
    - command: shell.exec
      params:
        script: |
          # Remove all Docker images
          docker rmi -f $(docker images -a -q) &> /dev/null || true
  "build_docker":
    - command: shell.exec
      params:
        working_dir: src/atlas-service-broker
        script: |
          docker build . -t ${docker_repo}/${docker_name}
  "publish_docker":
    - command: shell.exec
      params:
        working_dir: src/atlas-service-broker
        script: |
          docker login --username ${docker_username} --password ${docker_password} ${docker_repo}

          docker image tag ${docker_repo}/${docker_name} ${docker_repo}/${docker_name}:${version}
          docker push ${docker_repo}/${docker_name}:${version}

          # Tag image as "latest" if version is stable.
          if [[ ${version} =~ [0-9]+.[0-9]+.[0-9]+$ ]]; then
            docker image tag ${docker_repo}/${docker_name}:${version} ${docker_repo}/${docker_name}:latest
            docker push ${docker_repo}/${docker_name}:latest
          fi
  "setup_kubernetes":
    - command: shell.exec
      params:
        script: |
          echo "Install kubectl"
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/

          echo "Install kind"
          curl -LO https://github.com/kubernetes-sigs/kind/releases/download/v0.4.0/kind-linux-amd64
          chmod +x ./kind-linux-amd64
          sudo mv ./kind-linux-amd64 /usr/local/bin/kind

          echo "Start cluster"
          kind create cluster 
          export KUBECONFIG="$(kind get kubeconfig-path)"

          echo "Install Helm"
          curl -LO https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz
          tar -zxvf helm-v2.14.3-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          
          echo "Setup helm"
          kubectl --namespace kube-system create serviceaccount tiller
          kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
          helm init --service-account tiller --wait

          echo "Install Service Catalog extension"
          helm repo add svc-cat https://svc-catalog-charts.storage.googleapis.com
          helm install svc-cat/catalog --name service-catalog --namespace catalog
          kubectl rollout status --watch deployment/service-catalog-catalog-apiserver --namespace=catalog

          echo "Adding Docker image to cluster"
          docker image tag ${docker_repo}/${docker_name} ${docker_repo}/${docker_name}:e2e-test
          kind load docker-image ${docker_repo}/${docker_name}
  "teardown_kubernetes":
    - command: shell.exec
      params:
        script: kind delete cluster
 
  "e2e_tests_kubernetes":
    - command: shell.exec
      params:
        working_dir: src/atlas-service-broker
        script: |
          export ATLAS_BASE_URL=${atlas_base_url}
          export ATLAS_GROUP_ID=${atlas_group_id}
          export ATLAS_PUBLIC_KEY=${atlas_public_key}
          export ATLAS_PRIVATE_KEY=${atlas_private_key}
          export KUBECONFIG="$(kind get kubeconfig-path)"
          export DOCKER_IMAGE="${docker_repo}/${docker_name}:e2e-test"

          go test -timeout 1h -v ./test/e2e | tee e2e_kubernetes_result.suite
    - command: gotest.parse_files
      params:
        files: ["src/atlas-service-broker/e2e_kubernetes_result.suite"]

tasks:
  - name: unit_tests
    commands:
      - func: "go_unit_tests"
  - name: vet
    commands:
      - func: "go_vet"
  - name: integration_tests
    commands:
      - func: "integration_tests"
  - name: release_github
    patch_only: true
    commands:
      - func: "fetch_source"
      - func: "get_tagged_version"
      - func: "build_binaries"
      - func: "setup_hub"
      - func: "publish_github_release"
  - name: release_docker
    patch_only: true
    depends_on:
      - name: release_github
    commands:
      - func: "fetch_source"
      - func: "get_tagged_version"
      - func: "setup_docker"
      - func: "build_docker"
      - func: "publish_docker"
  - name: e2e_tests_kubernetes
    commands:
      - func: "e2e_tests_kubernetes"

task_groups:
  - name: unit_task_group
    setup_group:
      - func: "fetch_source"
    tasks:
      - unit_tests
      - vet
  - name: integration_task_group
    setup_group:
      - func: "fetch_source"
    tasks:
      - integration_tests
  - name: e2e_task_group
    setup_group:
      - func: "fetch_source"
      - func: "setup_docker"
      - func: "build_docker"
      - func: "setup_kubernetes"
    tasks:
      - e2e_tests_kubernetes
    teardown_group:
      - func: "teardown_kubernetes"
      - func: "teardown_docker"

buildvariants:
  - name: test
    display_name: test
    run_on: archlinux-test
    tasks:
      - unit_task_group
      - integration_task_group
      - e2e_task_group
  - name: release
    display_name: release
    run_on: archlinux-test
    tasks:
      - release_github
      - release_docker
